// @generated by Peggy 4.0.3.
//
// https://peggyjs.org/



import { Type, dataType } from "./symbol/Type.js"
import { Print } from "./instructions/Print.js"
import { VarStatement } from "./instructions/VarStatement.js"
import { VarAssignment } from "./instructions/VarAssignment.js"
import { If } from "./instructions/If.js"
import { While } from "./instructions/While.js"
import { Switch } from "./instructions/Switch.js"
import { Case } from "./instructions/Case.js"
import { Break } from "./instructions/Break.js"
import { Return } from "./instructions/Return.js"
import { Continue } from "./instructions/Continue.js"
import { For } from "./instructions/For.js"
import { ForEach } from "./instructions/ForEach.js"
import { Function } from "./instructions/Function.js"
import { Arrays } from "./instructions/Arrays.js"
import { ArrayAssignment } from "./instructions/ArrayAssignment.js"
import { Comentarios } from "./instructions/Comentarios.js"
import { Native } from "./expressions/Native.js"
import { Arithmetics, Operators } from "./expressions/Arithmetics.js"
import { Relational, RelOperators } from "./expressions/Relational.js"
import { Logical, LogOperator } from "./expressions/Logical.js"
import { VarAccess } from "./expressions/VarAccess.js"
import { CallFunction } from "./expressions/CallFunction.js"
import { ParseInt } from "./expressions/ParseInt.js"
import { ParseFloat } from "./expressions/ParseFloat.js"
import { ToString } from "./expressions/ToString.js"
import { ToLower } from "./expressions/ToLower.js"
import { ToUpper } from "./expressions/ToUpper.js"
import { TypeOf } from "./expressions/TypeOf.js"
import { IndexOf } from "./expressions/IndexOf.js"
import { Join } from "./expressions/Join.js"
import { Length } from "./expressions/Length.js"

function arithOperations(left, expand){
    const op1 = left
    const op2 = expand[2]
    const op = expand[0]

    return new Arithmetics(op1, op2, op)
}

function relOperations(left, expand){
    const op1 = left
    const op2 = expand[2]
    const op = expand[0]

    return new Relational(op1, op2, op)
}

function LogOperations(left, expand){
    const op1 = left
    const op2 = expand[2]
    const op = expand[0]

    return new Logical(op1, op2, op)
}

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { S: peg$parseS };
  var peg$startRuleFunction = peg$parseS;

  var peg$c0 = ";";
  var peg$c1 = "System.out.println";
  var peg$c2 = "(";
  var peg$c3 = ")";
  var peg$c4 = "=";
  var peg$c5 = "var";
  var peg$c6 = "{";
  var peg$c7 = "}";
  var peg$c8 = "[";
  var peg$c9 = "]";
  var peg$c10 = "new";
  var peg$c11 = ",";
  var peg$c12 = "int";
  var peg$c13 = "float";
  var peg$c14 = "string";
  var peg$c15 = "boolean";
  var peg$c16 = "char";
  var peg$c17 = "void";
  var peg$c18 = "+";
  var peg$c19 = "-";
  var peg$c20 = ".";
  var peg$c21 = "if";
  var peg$c22 = "else";
  var peg$c23 = "switch";
  var peg$c24 = "case";
  var peg$c25 = ":";
  var peg$c26 = "default";
  var peg$c27 = "while";
  var peg$c28 = "break";
  var peg$c29 = "continue";
  var peg$c30 = "return";
  var peg$c31 = "for";
  var peg$c32 = "||";
  var peg$c33 = "&&";
  var peg$c34 = "==";
  var peg$c35 = "!=";
  var peg$c36 = ">=";
  var peg$c37 = ">";
  var peg$c38 = "<=";
  var peg$c39 = "<";
  var peg$c40 = "!";
  var peg$c41 = "parseInt";
  var peg$c42 = "parsefloat";
  var peg$c43 = "toString";
  var peg$c44 = "toLowerCase";
  var peg$c45 = "toUpperCase";
  var peg$c46 = "typeof";
  var peg$c47 = "indexOf(";
  var peg$c48 = "join(";
  var peg$c49 = "length";
  var peg$c50 = "\"";
  var peg$c51 = "'";
  var peg$c52 = "true";
  var peg$c53 = "false";
  var peg$c54 = "//";
  var peg$c55 = "/*";
  var peg$c56 = "*/";

  var peg$r0 = /^[+\-]/;
  var peg$r1 = /^[%*\/]/;
  var peg$r2 = /^[^"]/;
  var peg$r3 = /^[^']/;
  var peg$r4 = /^[0-9]/;
  var peg$r5 = /^[a-zA-Z_]/;
  var peg$r6 = /^[a-zA-Z0-9_]/;
  var peg$r7 = /^[ \t\n\r]/;
  var peg$r8 = /^[\n]/;

  var peg$e0 = peg$literalExpectation(";", false);
  var peg$e1 = peg$literalExpectation("System.out.println", false);
  var peg$e2 = peg$literalExpectation("(", false);
  var peg$e3 = peg$literalExpectation(")", false);
  var peg$e4 = peg$literalExpectation("=", false);
  var peg$e5 = peg$literalExpectation("var", false);
  var peg$e6 = peg$literalExpectation("{", false);
  var peg$e7 = peg$literalExpectation("}", false);
  var peg$e8 = peg$literalExpectation("[", false);
  var peg$e9 = peg$literalExpectation("]", false);
  var peg$e10 = peg$literalExpectation("new", false);
  var peg$e11 = peg$literalExpectation(",", false);
  var peg$e12 = peg$literalExpectation("int", false);
  var peg$e13 = peg$literalExpectation("float", false);
  var peg$e14 = peg$literalExpectation("string", false);
  var peg$e15 = peg$literalExpectation("boolean", false);
  var peg$e16 = peg$literalExpectation("char", false);
  var peg$e17 = peg$literalExpectation("void", false);
  var peg$e18 = peg$literalExpectation("+", false);
  var peg$e19 = peg$literalExpectation("-", false);
  var peg$e20 = peg$literalExpectation(".", false);
  var peg$e21 = peg$literalExpectation("if", false);
  var peg$e22 = peg$literalExpectation("else", false);
  var peg$e23 = peg$literalExpectation("switch", false);
  var peg$e24 = peg$literalExpectation("case", false);
  var peg$e25 = peg$literalExpectation(":", false);
  var peg$e26 = peg$literalExpectation("default", false);
  var peg$e27 = peg$literalExpectation("while", false);
  var peg$e28 = peg$literalExpectation("break", false);
  var peg$e29 = peg$literalExpectation("continue", false);
  var peg$e30 = peg$literalExpectation("return", false);
  var peg$e31 = peg$literalExpectation("for", false);
  var peg$e32 = peg$literalExpectation("||", false);
  var peg$e33 = peg$literalExpectation("&&", false);
  var peg$e34 = peg$literalExpectation("==", false);
  var peg$e35 = peg$literalExpectation("!=", false);
  var peg$e36 = peg$literalExpectation(">=", false);
  var peg$e37 = peg$literalExpectation(">", false);
  var peg$e38 = peg$literalExpectation("<=", false);
  var peg$e39 = peg$literalExpectation("<", false);
  var peg$e40 = peg$classExpectation(["+", "-"], false, false);
  var peg$e41 = peg$classExpectation(["%", "*", "/"], false, false);
  var peg$e42 = peg$literalExpectation("!", false);
  var peg$e43 = peg$literalExpectation("parseInt", false);
  var peg$e44 = peg$literalExpectation("parsefloat", false);
  var peg$e45 = peg$literalExpectation("toString", false);
  var peg$e46 = peg$literalExpectation("toLowerCase", false);
  var peg$e47 = peg$literalExpectation("toUpperCase", false);
  var peg$e48 = peg$literalExpectation("typeof", false);
  var peg$e49 = peg$literalExpectation("indexOf(", false);
  var peg$e50 = peg$literalExpectation("join(", false);
  var peg$e51 = peg$literalExpectation("length", false);
  var peg$e52 = peg$literalExpectation("\"", false);
  var peg$e53 = peg$classExpectation(["\""], true, false);
  var peg$e54 = peg$literalExpectation("'", false);
  var peg$e55 = peg$classExpectation(["'"], true, false);
  var peg$e56 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e57 = peg$literalExpectation("true", false);
  var peg$e58 = peg$literalExpectation("false", false);
  var peg$e59 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
  var peg$e60 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
  var peg$e61 = peg$otherExpectation("whitespace");
  var peg$e62 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
  var peg$e63 = peg$literalExpectation("//", false);
  var peg$e64 = peg$classExpectation(["\n"], false, false);
  var peg$e65 = peg$anyExpectation();
  var peg$e66 = peg$literalExpectation("/*", false);
  var peg$e67 = peg$literalExpectation("*/", false);

  var peg$f0 = function(ins, arr) { arr.unshift(ins); return arr };
  var peg$f1 = function(ins) { return new Array(ins) };
  var peg$f2 = function(exp) { const {start:{line, column}} = location(); return new Print(exp, line, column)};
  var peg$f3 = function(type, id, exp) { const {start:{line, column}} = location(); return new VarStatement(type, id, exp, line, column) };
  var peg$f4 = function(id, exp) { const {start:{line, column}} = location(); return new VarStatement(new Type(dataType.VOID), id, exp, line, column) };
  var peg$f5 = function(type, id, par, ins) {const {start:{line, column}} = location(); return new Function(type, id, par, ins, line, column)};
  var peg$f6 = function(type, cor, id, val) { const {start:{line, column}} = location(); return new Arrays(type, id, val.length, val, cor.length, line, column); };
  var peg$f7 = function(type, id, val) { const {start:{line, column}} = location(); return new Arrays(type, id, val.length, val, 1, line, column); };
  var peg$f8 = function(type, cor, id, exps) { const {start:{line, column}} = location(); return new Arrays(type, id, exps, null, cor.length, line, column); };
  var peg$f9 = function(type, id, id2) { const {start:{line, column}} = location(); return new Arrays(type, id, null, new VarAccess(id2, null, line, column), 1, line, column); };
  var peg$f10 = function(type, id) { const {start:{line, column}} = location(); return new VarStatement(type, id, undefined, line, column) };
  var peg$f11 = function(type, id, params) { let param = new Map(); param.set("id", id); param.set("type", type); params.unshift(param); return params };
  var peg$f12 = function(type, id) { let param = new Map(); param.set("id", id); param.set("type", type); return [param] };
  var peg$f13 = function(exp, val) { val.unshift(exp); return val };
  var peg$f14 = function(exp) { return new Array(exp) };
  var peg$f15 = function() { return new Type(dataType.INTEGER) };
  var peg$f16 = function() { return new Type(dataType.DOUBLE) };
  var peg$f17 = function() { return new Type(dataType.STRING) };
  var peg$f18 = function() { return new Type(dataType.BOOLEAN) };
  var peg$f19 = function() { return new Type(dataType.CHAR) };
  var peg$f20 = function() { return new Type(dataType.VOID) };
  var peg$f21 = function(id, exp) { const {start:{line, column}} = location(); return new VarAssignment(id, exp, line, column)};
  var peg$f22 = function(id, exp) { const {start:{line, column}} = location(); return new VarAssignment(id, new Arithmetics(new VarAccess(id, null, line, column), exp, "+"), line, column) };
  var peg$f23 = function(id, exp) { const {start:{line, column}} = location(); return new VarAssignment(id, new Arithmetics(new VarAccess(id, null, line, column), exp, "-"), line, column)};
  var peg$f24 = function(id) { const {start:{line, column}} = location(); return new VarAssignment(id, new Arithmetics(new VarAccess(id, null, line, column), new Native(new Type(dataType.INTEGER), 1, line, column), "+"), line, column)};
  var peg$f25 = function(id) { const {start:{line, column}} = location(); return new VarAssignment(id, new Arithmetics(new VarAccess(id, null, line, column), new Native(new Type(dataType.INTEGER), 1, line, column), "-"), line, column)};
  var peg$f26 = function(id, exps, exp) { const {start:{line, column}} = location(); return new ArrayAssignment(id, exp, exps, line, column) };
  var peg$f27 = function(id, id2, exp) { const {start:{line, column}} = location(); return new StructAssignment(id, id2, exp, line, column)};
  var peg$f28 = function(exp, inst1, inst2) { const {start:{line, column}} = location(); return new If(exp, inst1, inst2 !== null  ? inst2 : null, line, column) };
  var peg$f29 = function(inst1) { return inst1 };
  var peg$f30 = function(if2) { return new Array(if2) };
  var peg$f31 = function(exp, cases, def) { const {start:{line, column}} = location(); return new Switch(exp, cases, def, line, column) };
  var peg$f32 = function(cas, casL) { casL.unshift(cas); return casL };
  var peg$f33 = function(cas) { return new Array(cas) };
  var peg$f34 = function(exp, ins) { const {start:{line, column}} = location(); return new Case(exp, ins, line, column) };
  var peg$f35 = function(ins) { const {start:{line, column}} = location(); return new Case(null, ins, line, column) };
  var peg$f36 = function(exp, ins) { const {start:{line, column}} = location(); return new While(exp, ins, line, column) };
  var peg$f37 = function() { const {start:{line, column}} = location(); return new Break(line, column) };
  var peg$f38 = function() { const {start:{line, column}} = location(); return new Continue(line, column) };
  var peg$f39 = function(exp) { const {start:{line, column}} = location(); return new Return(exp, line, column) };
  var peg$f40 = function(stat, exp, assig, ins) { const {start:{line, column}} = location(); return new For(stat, exp, assig, ins, line, column) };
  var peg$f41 = function(stat, id, ins) { const {start:{line, column}} = location(); return new ForEach(stat, id, ins, line, column) };
  var peg$f42 = function(exp, arr) { arr.unshift(exp); return arr };
  var peg$f43 = function(exp) { return new Array(exp) };
  var peg$f44 = function(op1, expanded) { const {start:{line, column}} = location(); const res = expanded.reduce(LogOperations, op1) 
    res.setLine(line); res.setColumn(column); return res};
  var peg$f45 = function(op1, expanded) { const {start:{line, column}} = location(); const res = expanded.reduce(LogOperations, op1) 
    res.setLine(line); res.setColumn(column); return res};
  var peg$f46 = function(op1, expanded) { const {start:{line, column}} = location(); const res = expanded.reduce(relOperations, op1) 
    res.setLine(line); res.setColumn(column); return res};
  var peg$f47 = function(op1, expanded) { const {start:{line, column}} = location(); const res = expanded.reduce(relOperations, op1) 
    res.setLine(line); res.setColumn(column); return res};
  var peg$f48 = function(op1, expanded) { const {start:{line, column}} = location(); const res = expanded.reduce(arithOperations, op1) 
    res.setLine(line); res.setColumn(column); return res};
  var peg$f49 = function(op1, expanded) { const {start:{line, column}} = location(); const res = expanded.reduce(arithOperations, op1) 
    res.setLine(line); res.setColumn(column); return res};
  var peg$f50 = function(op1) { const {start:{line, column}} = location(); const res = new Arithmetics(null, op1, Operators.DENIAL, line, column)
                                res.setLine(line); res.setColumn(column); return res};
  var peg$f51 = function(op1) { const {start:{line, column}} = location(); const res = new Logical(null, op1, LogOperator.NOT, line, column)
                                res.setLine(line); res.setColumn(column); return res};
  var peg$f52 = function(exp) { const {start:{line, column}} = location(); return new ParseInt(exp, line, column)};
  var peg$f53 = function(exp) { const {start:{line, column}} = location(); return new ParseFloat(exp, line, column)};
  var peg$f54 = function(exp) { const {start:{line, column}} = location(); return new ToString(exp, line, column)};
  var peg$f55 = function(exp) { const {start:{line, column}} = location(); return new ToLower(exp, line, column)};
  var peg$f56 = function(exp) { const {start:{line, column}} = location(); return new ToUpper(exp, line, column)};
  var peg$f57 = function(exp) { const {start:{line, column}} = location(); return new TypeOf(exp, line, column)};
  var peg$f58 = function(id, par) { const {start:{line, column}} = location(); return new CallFunction(id, par, line, column)};
  var peg$f59 = function(id, exps) { const {start:{line, column}} = location(); return new VarAccess(id, exps, line, column)};
  var peg$f60 = function(id, exp) { const {start:{line, column}} = location(); return new IndexOf(id, exp, line, column)};
  var peg$f61 = function(id) { const {start:{line, column}} = location(); return new Join(id, line, column)};
  var peg$f62 = function(id) { const {start:{line, column}} = location(); return new Length(id, line, column)};
  var peg$f63 = function(id) { const {start:{line, column}} = location(); return new VarAccess(id, null, line, column)};
  var peg$f64 = function(exp, par) { par.unshift(exp); return par };
  var peg$f65 = function(exp) { return new Array(exp) };
  var peg$f66 = function(chars) { const {start:{line, column}} = location(); 
    return new Native(new Type(dataType.STRING), chars.join(""), line, column) };
  var peg$f67 = function(char) { const {start:{line, column}} = location(); 
    return new Native(new Type(dataType.CHAR), char[0], line, column) };
  var peg$f68 = function(int) { const {start:{line, column}} = location(); 
    return new Native(new Type(dataType.INTEGER), parseInt(int.join(""), 10), line, column) };
  var peg$f69 = function(int, double) { const {start:{line, column}} = location(); 
    return new Native(new Type(dataType.DOUBLE), parseFloat(int.join("") + "."+ double.join(""), 10), line, column) };
  var peg$f70 = function(bool) { const {start:{line, column}} = location()
    return new Native(new Type(dataType.BOOLEAN), bool === "true", line, column) };
  var peg$f71 = function() {return text() };
  var peg$f72 = function(comment) { return new Comentarios(true, text().replace("//","#").replace("\n",""), 0, 0) };
  var peg$f73 = function(comment) { return new Comentarios(false, text(), 0, 0) };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseS() {
    var s0;

    s0 = peg$parseINSTRUCTIONS();

    return s0;
  }

  function peg$parseINSTRUCTIONS() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseINSTRUCTION();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseINSTRUCTIONS();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f0(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseINSTRUCTION();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f1(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseINSTRUCTION() {
    var s0, s1, s2, s3, s4;

    s0 = peg$parsePRINT();
    if (s0 === peg$FAILED) {
      s0 = peg$parseBREAK();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCONTINUE();
        if (s0 === peg$FAILED) {
          s0 = peg$parseRETURN();
          if (s0 === peg$FAILED) {
            s0 = peg$parseIF();
            if (s0 === peg$FAILED) {
              s0 = peg$parseWHILE();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSWITCH();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseFOR();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseFOR2();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseSTATEMENT();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseCOMENTARIOS();
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseASSIGNMENT();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 59) {
                              s3 = peg$c0;
                              peg$currPos++;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parse_();
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parsePREC7();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parse_();
                              if (input.charCodeAt(peg$currPos) === 59) {
                                s3 = peg$c0;
                                peg$currPos++;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e0); }
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parse_();
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePRINT() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 18) === peg$c1) {
      s2 = peg$c1;
      peg$currPos += 18;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseEXPRESSIONSPRINT();
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s6 = peg$c3;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s8 = peg$c0;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f2(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTATEMENT() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    s0 = peg$currPos;
    s1 = peg$parseTYPE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 61) {
          s5 = peg$c4;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsePREC7();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c0;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f3(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c5) {
        s1 = peg$c5;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseID();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s5 = peg$c4;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parsePREC7();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s9 = peg$c0;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f4(s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTYPE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseID();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 40) {
              s5 = peg$c2;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parsePARAMS();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s9 = peg$c3;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 123) {
                  s11 = peg$c6;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e6); }
                }
                if (s11 !== peg$FAILED) {
                  s12 = peg$parse_();
                  s13 = peg$parseINSTRUCTIONS();
                  if (s13 !== peg$FAILED) {
                    s14 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s15 = peg$c7;
                      peg$currPos++;
                    } else {
                      s15 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e7); }
                    }
                    if (s15 !== peg$FAILED) {
                      s16 = peg$parse_();
                      peg$savedPos = s0;
                      s0 = peg$f5(s1, s3, s7, s13);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseTYPE();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s4 = peg$c8;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e8); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c9;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e9); }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseID();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 61) {
                  s7 = peg$c4;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e4); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s9 = peg$c6;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e6); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse_();
                    s11 = peg$parseVALUES();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s13 = peg$c7;
                        peg$currPos++;
                      } else {
                        s13 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e7); }
                      }
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 59) {
                          s15 = peg$c0;
                          peg$currPos++;
                        } else {
                          s15 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                        }
                        if (s15 !== peg$FAILED) {
                          s16 = peg$parse_();
                          peg$savedPos = s0;
                          s0 = peg$f6(s1, s3, s5, s11);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseTYPE();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 91) {
                s3 = peg$c8;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e8); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 93) {
                  s5 = peg$c9;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e9); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  s7 = peg$parseID();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s9 = peg$c4;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e4); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 123) {
                        s11 = peg$c6;
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e6); }
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parse_();
                        s13 = peg$parseVALUES();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s15 = peg$c7;
                            peg$currPos++;
                          } else {
                            s15 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e7); }
                          }
                          if (s15 !== peg$FAILED) {
                            s16 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 59) {
                              s17 = peg$c0;
                              peg$currPos++;
                            } else {
                              s17 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                            }
                            if (s17 !== peg$FAILED) {
                              s18 = peg$parse_();
                              peg$savedPos = s0;
                              s0 = peg$f7(s1, s7, s13);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseTYPE();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                  s4 = peg$c8;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e8); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s6 = peg$c9;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e9); }
                  }
                  if (s6 !== peg$FAILED) {
                    s4 = [s4, s5, s6];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  s5 = peg$parseID();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s7 = peg$c4;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e4); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (input.substr(peg$currPos, 3) === peg$c10) {
                        s9 = peg$c10;
                        peg$currPos += 3;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e10); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse_();
                        s11 = peg$parseTYPE();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parse_();
                          s13 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 91) {
                            s14 = peg$c8;
                            peg$currPos++;
                          } else {
                            s14 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e8); }
                          }
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parse_();
                            s16 = peg$parsePREC7();
                            if (s16 !== peg$FAILED) {
                              s17 = peg$parse_();
                              if (input.charCodeAt(peg$currPos) === 93) {
                                s18 = peg$c9;
                                peg$currPos++;
                              } else {
                                s18 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e9); }
                              }
                              if (s18 !== peg$FAILED) {
                                s13 = s16;
                              } else {
                                peg$currPos = s13;
                                s13 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s13;
                              s13 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s13;
                            s13 = peg$FAILED;
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 59) {
                              s15 = peg$c0;
                              peg$currPos++;
                            } else {
                              s15 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                            }
                            if (s15 !== peg$FAILED) {
                              s16 = peg$parse_();
                              peg$savedPos = s0;
                              s0 = peg$f8(s1, s3, s5, s13);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseTYPE();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 91) {
                    s3 = peg$c8;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e8); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s5 = peg$c9;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e9); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      s7 = peg$parseID();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 61) {
                          s9 = peg$c4;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e4); }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parse_();
                          s11 = peg$parseID();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 59) {
                              s13 = peg$c0;
                              peg$currPos++;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e0); }
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parse_();
                              peg$savedPos = s0;
                              s0 = peg$f9(s1, s7, s11);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseTYPE();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    s3 = peg$parseID();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 59) {
                        s5 = peg$c0;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s5 === peg$FAILED) {
                        s5 = null;
                      }
                      s6 = peg$parse_();
                      peg$savedPos = s0;
                      s0 = peg$f10(s1, s3);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePARAMS() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseTYPE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseID();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c11;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsePARAMS();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f11(s1, s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseTYPE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseID();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f12(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseVALUES() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsePREC7();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s3 = peg$c11;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseVALUES();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f13(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsePREC7();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f14(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseTYPE() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c12) {
      s1 = peg$c12;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c13) {
        s1 = peg$c13;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f16();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c14) {
          s1 = peg$c14;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f17();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c15) {
            s1 = peg$c15;
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f18();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c16) {
              s1 = peg$c16;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f19();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 4) === peg$c17) {
                s1 = peg$c17;
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e17); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f20();
              }
              s0 = s1;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseASSIGNMENT() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c4;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsePREC7();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f21(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseID();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 43) {
          s3 = peg$c18;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s5 = peg$c4;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parsePREC7();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f22(s1, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseID();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 45) {
            s3 = peg$c19;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 61) {
              s5 = peg$c4;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parsePREC7();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f23(s1, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseID();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 43) {
              s3 = peg$c18;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e18); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 43) {
                s5 = peg$c18;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e18); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f24(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseID();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 45) {
                s3 = peg$c19;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e19); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 45) {
                  s5 = peg$c19;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e19); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  peg$savedPos = s0;
                  s0 = peg$f25(s1);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseID();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = [];
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                  s5 = peg$c8;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e8); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  s7 = peg$parsePREC7();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s9 = peg$c9;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e9); }
                    }
                    if (s9 !== peg$FAILED) {
                      s4 = s7;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 91) {
                      s5 = peg$c8;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e8); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      s7 = peg$parsePREC7();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 93) {
                          s9 = peg$c9;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e9); }
                        }
                        if (s9 !== peg$FAILED) {
                          s4 = s7;
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  }
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s5 = peg$c4;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e4); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    s7 = peg$parsePREC7();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      peg$savedPos = s0;
                      s0 = peg$f26(s1, s3, s7);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseID();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s3 = peg$c20;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e20); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    s5 = peg$parseID();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 61) {
                        s7 = peg$c4;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e4); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        s9 = peg$parsePREC7();
                        if (s9 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f27(s1, s5, s9);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseIF() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c21) {
      s2 = peg$c21;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parsePREC7();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s8 = peg$c3;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s10 = peg$c6;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parseINSTRUCTIONS();
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s14 = peg$c7;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = peg$parse_();
                  s16 = peg$parseELSE();
                  if (s16 === peg$FAILED) {
                    s16 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f28(s6, s12, s16);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseELSE() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c6;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseINSTRUCTIONS();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 125) {
            s7 = peg$c7;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f29(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c22) {
        s1 = peg$c22;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseIF();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f30(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSWITCH() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 6) === peg$c23) {
      s2 = peg$c23;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parsePREC7();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s8 = peg$c3;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s10 = peg$c6;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parseCASESLIST();
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                s14 = peg$parseDEFAULT();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                s15 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s16 = peg$c7;
                  peg$currPos++;
                } else {
                  s16 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s16 !== peg$FAILED) {
                  s17 = peg$parse_();
                  peg$savedPos = s0;
                  s0 = peg$f31(s6, s12, s14);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCASESLIST() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseCASE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCASESLIST();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f32(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCASE();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f33(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseCASE() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c24) {
      s1 = peg$c24;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsePREC7();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s5 = peg$c25;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseINSTRUCTIONS();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f34(s3, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDEFAULT() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c26) {
      s1 = peg$c26;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c25;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseINSTRUCTIONS();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f35(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWHILE() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 5) === peg$c27) {
      s2 = peg$c27;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parsePREC7();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s8 = peg$c3;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s10 = peg$c6;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parseINSTRUCTIONS();
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s14 = peg$c7;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = peg$parse_();
                  peg$savedPos = s0;
                  s0 = peg$f36(s6, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBREAK() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c28) {
      s1 = peg$c28;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f37();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCONTINUE() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c29) {
      s1 = peg$c29;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f38();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRETURN() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c30) {
      s1 = peg$c30;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsePREC7();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s5 = peg$c0;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f39(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFOR() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 3) === peg$c31) {
      s2 = peg$c31;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseSTATEMENT();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parsePREC7();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s10 = peg$c0;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parseASSIGNMENT();
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s14 = peg$c3;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e3); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s16 = peg$c6;
                    peg$currPos++;
                  } else {
                    s16 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e6); }
                  }
                  if (s16 !== peg$FAILED) {
                    s17 = peg$parse_();
                    s18 = peg$parseINSTRUCTIONS();
                    if (s18 !== peg$FAILED) {
                      s19 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s20 = peg$c7;
                        peg$currPos++;
                      } else {
                        s20 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e7); }
                      }
                      if (s20 !== peg$FAILED) {
                        s21 = peg$parse_();
                        peg$savedPos = s0;
                        s0 = peg$f40(s6, s8, s12, s18);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFOR2() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 3) === peg$c31) {
      s2 = peg$c31;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseSTATEMENT();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 58) {
            s8 = peg$c25;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e25); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseID();
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s12 = peg$c3;
                peg$currPos++;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 123) {
                  s14 = peg$c6;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e6); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = peg$parse_();
                  s16 = peg$parseINSTRUCTIONS();
                  if (s16 !== peg$FAILED) {
                    s17 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s18 = peg$c7;
                      peg$currPos++;
                    } else {
                      s18 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e7); }
                    }
                    if (s18 !== peg$FAILED) {
                      s19 = peg$parse_();
                      peg$savedPos = s0;
                      s0 = peg$f41(s6, s10, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEXPRESSIONSPRINT() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsePREC7();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s3 = peg$c11;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseEXPRESSIONSPRINT();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f42(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsePREC7();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f43(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsePREC7() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePREC6();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c32) {
        s5 = peg$c32;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsePREC6();
        if (s7 !== peg$FAILED) {
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c32) {
          s5 = peg$c32;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e32); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsePREC6();
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f44(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePREC6() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePREC5();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c33) {
        s5 = peg$c33;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsePREC5();
        if (s7 !== peg$FAILED) {
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c33) {
          s5 = peg$c33;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsePREC5();
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f45(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePREC5() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePREC4();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c34) {
        s5 = peg$c34;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s5 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c35) {
          s5 = peg$c35;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsePREC4();
        if (s7 !== peg$FAILED) {
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c34) {
          s5 = peg$c34;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c35) {
            s5 = peg$c35;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e35); }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsePREC4();
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f46(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePREC4() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePREC3();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c36) {
        s5 = peg$c36;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s5 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 62) {
          s5 = peg$c37;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c38) {
            s5 = peg$c38;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e38); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 60) {
              s5 = peg$c39;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e39); }
            }
          }
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsePREC3();
        if (s7 !== peg$FAILED) {
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c36) {
          s5 = peg$c36;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e36); }
        }
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s5 = peg$c37;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e37); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c38) {
              s5 = peg$c38;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e38); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 60) {
                s5 = peg$c39;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e39); }
              }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsePREC3();
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f47(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePREC3() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePREC2();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = input.charAt(peg$currPos);
      if (peg$r0.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsePREC2();
        if (s7 !== peg$FAILED) {
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = input.charAt(peg$currPos);
        if (peg$r0.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e40); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsePREC2();
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f48(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePREC2() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePREC1();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = input.charAt(peg$currPos);
      if (peg$r1.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsePREC1();
        if (s7 !== peg$FAILED) {
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = input.charAt(peg$currPos);
        if (peg$r1.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsePREC1();
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f49(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePREC1() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseNATIVOS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNATIVOS() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c2;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsePREC7();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c3;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s5 !== peg$FAILED) {
          s0 = s3;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c19;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parsePREC2();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f50(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 33) {
          s1 = peg$c40;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parsePREC2();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f51(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseSTRING();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCHAR();
            if (s0 === peg$FAILED) {
              s0 = peg$parseDOUBLE();
              if (s0 === peg$FAILED) {
                s0 = peg$parseINTEGER();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseBOOLEAN();
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 8) === peg$c41) {
                      s1 = peg$c41;
                      peg$currPos += 8;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e43); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s3 = peg$c2;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e2); }
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        s5 = peg$parsePREC7();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s7 = peg$c3;
                            peg$currPos++;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e3); }
                          }
                          if (s7 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f52(s5);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 10) === peg$c42) {
                        s1 = peg$c42;
                        peg$currPos += 10;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e44); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 40) {
                          s3 = peg$c2;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e2); }
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parse_();
                          s5 = peg$parsePREC7();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 41) {
                              s7 = peg$c3;
                              peg$currPos++;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e3); }
                            }
                            if (s7 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f53(s5);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 8) === peg$c43) {
                          s1 = peg$c43;
                          peg$currPos += 8;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e45); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c2;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e2); }
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            s5 = peg$parsePREC7();
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parse_();
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s7 = peg$c3;
                                peg$currPos++;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e3); }
                              }
                              if (s7 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f54(s5);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 11) === peg$c44) {
                            s1 = peg$c44;
                            peg$currPos += 11;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e46); }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 40) {
                              s3 = peg$c2;
                              peg$currPos++;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e2); }
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parse_();
                              s5 = peg$parsePREC7();
                              if (s5 !== peg$FAILED) {
                                s6 = peg$parse_();
                                if (input.charCodeAt(peg$currPos) === 41) {
                                  s7 = peg$c3;
                                  peg$currPos++;
                                } else {
                                  s7 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e3); }
                                }
                                if (s7 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f55(s5);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 11) === peg$c45) {
                              s1 = peg$c45;
                              peg$currPos += 11;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e47); }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parse_();
                              if (input.charCodeAt(peg$currPos) === 40) {
                                s3 = peg$c2;
                                peg$currPos++;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e2); }
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parse_();
                                s5 = peg$parsePREC7();
                                if (s5 !== peg$FAILED) {
                                  s6 = peg$parse_();
                                  if (input.charCodeAt(peg$currPos) === 41) {
                                    s7 = peg$c3;
                                    peg$currPos++;
                                  } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e3); }
                                  }
                                  if (s7 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f56(s5);
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 6) === peg$c46) {
                                s1 = peg$c46;
                                peg$currPos += 6;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e48); }
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parse_();
                                s3 = peg$parsePREC7();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parse_();
                                  peg$savedPos = s0;
                                  s0 = peg$f57(s3);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseID();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parse_();
                                  if (input.charCodeAt(peg$currPos) === 40) {
                                    s3 = peg$c2;
                                    peg$currPos++;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e2); }
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parse_();
                                    s5 = peg$parsePARAMSCALL();
                                    if (s5 === peg$FAILED) {
                                      s5 = null;
                                    }
                                    s6 = peg$parse_();
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                      s7 = peg$c3;
                                      peg$currPos++;
                                    } else {
                                      s7 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e3); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                      s8 = peg$parse_();
                                      peg$savedPos = s0;
                                      s0 = peg$f58(s1, s5);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseID();
                                  if (s1 !== peg$FAILED) {
                                    s2 = [];
                                    s3 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 91) {
                                      s4 = peg$c8;
                                      peg$currPos++;
                                    } else {
                                      s4 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e8); }
                                    }
                                    if (s4 !== peg$FAILED) {
                                      s5 = peg$parse_();
                                      s6 = peg$parsePREC7();
                                      if (s6 !== peg$FAILED) {
                                        s7 = peg$parse_();
                                        if (input.charCodeAt(peg$currPos) === 93) {
                                          s8 = peg$c9;
                                          peg$currPos++;
                                        } else {
                                          s8 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e9); }
                                        }
                                        if (s8 !== peg$FAILED) {
                                          s3 = s6;
                                        } else {
                                          peg$currPos = s3;
                                          s3 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s3;
                                      s3 = peg$FAILED;
                                    }
                                    if (s3 !== peg$FAILED) {
                                      while (s3 !== peg$FAILED) {
                                        s2.push(s3);
                                        s3 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 91) {
                                          s4 = peg$c8;
                                          peg$currPos++;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e8); }
                                        }
                                        if (s4 !== peg$FAILED) {
                                          s5 = peg$parse_();
                                          s6 = peg$parsePREC7();
                                          if (s6 !== peg$FAILED) {
                                            s7 = peg$parse_();
                                            if (input.charCodeAt(peg$currPos) === 93) {
                                              s8 = peg$c9;
                                              peg$currPos++;
                                            } else {
                                              s8 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e9); }
                                            }
                                            if (s8 !== peg$FAILED) {
                                              s3 = s6;
                                            } else {
                                              peg$currPos = s3;
                                              s3 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s3;
                                            s3 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s3;
                                          s3 = peg$FAILED;
                                        }
                                      }
                                    } else {
                                      s2 = peg$FAILED;
                                    }
                                    if (s2 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f59(s1, s2);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseID();
                                    if (s1 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 46) {
                                        s2 = peg$c20;
                                        peg$currPos++;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e20); }
                                      }
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parse_();
                                        if (input.substr(peg$currPos, 8) === peg$c47) {
                                          s4 = peg$c47;
                                          peg$currPos += 8;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e49); }
                                        }
                                        if (s4 !== peg$FAILED) {
                                          s5 = peg$parse_();
                                          s6 = peg$parsePREC7();
                                          if (s6 !== peg$FAILED) {
                                            s7 = peg$parse_();
                                            if (input.charCodeAt(peg$currPos) === 41) {
                                              s8 = peg$c3;
                                              peg$currPos++;
                                            } else {
                                              s8 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e3); }
                                            }
                                            if (s8 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s0 = peg$f60(s1, s6);
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseID();
                                      if (s1 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 46) {
                                          s2 = peg$c20;
                                          peg$currPos++;
                                        } else {
                                          s2 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e20); }
                                        }
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parse_();
                                          if (input.substr(peg$currPos, 5) === peg$c48) {
                                            s4 = peg$c48;
                                            peg$currPos += 5;
                                          } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e50); }
                                          }
                                          if (s4 !== peg$FAILED) {
                                            s5 = peg$parse_();
                                            if (input.charCodeAt(peg$currPos) === 41) {
                                              s6 = peg$c3;
                                              peg$currPos++;
                                            } else {
                                              s6 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e3); }
                                            }
                                            if (s6 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s0 = peg$f61(s1);
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseID();
                                        if (s1 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 46) {
                                            s2 = peg$c20;
                                            peg$currPos++;
                                          } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e20); }
                                          }
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$parse_();
                                            if (input.substr(peg$currPos, 6) === peg$c49) {
                                              s4 = peg$c49;
                                              peg$currPos += 6;
                                            } else {
                                              s4 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e51); }
                                            }
                                            if (s4 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s0 = peg$f62(s1);
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseID();
                                          if (s1 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$f63(s1);
                                          }
                                          s0 = s1;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePARAMSCALL() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsePREC7();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s3 = peg$c11;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsePARAMSCALL();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f64(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsePREC7();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f65(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseSTRING() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c50;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSTRINGS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSTRINGS();
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c50;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f66(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTRINGS() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r2.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

    return s0;
  }

  function peg$parseCHAR() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c51;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCHARS();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c51;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f67(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCHARS() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r3.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }

    return s0;
  }

  function peg$parseINTEGER() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r4.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r4.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e56); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f68(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDOUBLE() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r4.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r4.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e56); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c20;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r4.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e56); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = input.charAt(peg$currPos);
            if (peg$r4.test(s4)) {
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e56); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f69(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBOOLEAN() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c52) {
      s1 = peg$c52;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c53) {
        s1 = peg$c53;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f70(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseID() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r5.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r6.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r6.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e60); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f71();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r7.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r7.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e61); }

    return s0;
  }

  function peg$parseCOMENTARIOS() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c54) {
      s2 = peg$c54;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      s6 = input.charAt(peg$currPos);
      if (peg$r8.test(s6)) {
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e64); }
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e65); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = input.charAt(peg$currPos);
        if (peg$r8.test(s6)) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e65); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f72(s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c55) {
        s2 = peg$c55;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c56) {
          s6 = peg$c56;
          peg$currPos += 2;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e67); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e65); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c56) {
            s6 = peg$c56;
            peg$currPos += 2;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e67); }
          }
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = undefined;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e65); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (input.substr(peg$currPos, 2) === peg$c56) {
          s4 = peg$c56;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e67); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f73(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "S"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
